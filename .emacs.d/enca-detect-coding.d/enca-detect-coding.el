(defun enca-detect-coding (arg)
  (if (not (and (eq (car arg) 'insert-file-contents) (nth 1 arg)))
      'undecided
    (let* (
	  (target (nth 1 arg))
          (enca-buffer (generate-new-buffer " *enca*"))
          (charset nil)
          (run-enca (if (atom target)
                        (lambda ()
                          (call-process "enca" target enca-buffer nil "-m"))
                      (lambda ()
                         (with-current-buffer (cdr target)
                          (let ((coding-system-for-write 'no-conversion)
                                (size (min 20480 (- (point-max)
                                                    (point-min)))))
                            (call-process-region
                             (point-min) (+ (point-min) size)
                             "enca" nil enca-buffer nil "-m")))))))
      (unwind-protect
	  (if (file-exists-p target)
            (when (= 0 (funcall run-enca))
              (with-current-buffer enca-buffer
                (goto-char 1)
                (downcase-region 1 (point-max))
                (skip-chars-forward "\t\n\f\r ")
                (delete-region 1 (point))
                (when (looking-at "\\(ibm\\)[0-9]")
                  (replace-match "cp" t t nil 1))
                (skip-chars-forward "^\t\n\f\r ")
                (setq charset (intern-soft (buffer-substring 1 (point))))))
          (kill-buffer enca-buffer)))
      (or (and (not (memq charset '(nil unknown us-ascii)))
               (coding-system-p charset)
               charset)
          'undecided))))

(modify-coding-system-alist 'file "" 'enca-detect-coding)
;;(modify-coding-system-alist 'file "\\.h\\'"   'koi8-r)
;;(modify-coding-system-alist 'file "\\.cxx\\'"   'koi8-r)

