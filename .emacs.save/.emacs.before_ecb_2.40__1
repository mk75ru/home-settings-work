
;; Personal settings for Emacs.

;;(require 'bitlbee)

;;------------------------------------------
;;Компилятор Lisp
;;------------------------------------------
;;указываем используемый компилятор lisp
;;(setq inferior-lisp-program "/usr/bin/sbcl")
;;------------------------------------------


;;------------------------------------------
;;magit
;;------------------------------------------
(autoload 'magit-status "magit" nil t)
(global-set-key "\C-xt" 'magit-status)
;;------------------------------------------



;;-----------------------------------------------------------
;;fb2 
;;-----------------------------------------------------------

;;(defun bread-mode()                                        
;;  userpic  (interactive)                                            
;;  (sgml-mode)                                              
;;  (sgml-tags-invisible 0)                                  
;;  (visual-line-mode)                                     	
;;  (setq mode-line-format nil)                              
;;  (view-mode))         


;;(add-to-list 'auto-mode-alist '("\\.fb2$" . bread-mode)) 




;Авто определение формата по расширению файла
(add-to-list 'auto-mode-alist '(".fb2$" . fb2-mode-view))

;Функция для файлов .fb2 в режиме просмотра
 (defun fb2-mode-view()
     (vc-toggle-read-only)
     (interactive)
     (sgml-mode)
     (sgml-tags-invisible 0))

;Функция для файлов .fb2 в режиме редактирования
(defun fb2-mode-edit()
     (vc-toggle-read-only nil)
     (interactive)
     (sgml-mode)
     (sgml-tags-invisible 0))


;;-----------------------------------------------------------
;;Русификация 
;;-----------------------------------------------------------
;; Minimal settings for users of Emacs working in 
;; Russian (KOI8-R) environment.
;; 
;; ALT Linux Team, February 2002.
;;(set-language-environment "Cyrillic-KOI8")

;; The following lines make the corresponding 
;; parameters independent of the current language-environment:
;; if you change language-environment, they won't be changed;
;; but if you comment out some of them, they will follow the
;; language-environment parameter:
;;(set-terminal-coding-system 'koi8-r)
;;(set-keyboard-coding-system 'koi8-r)
;; This could help for transferring data from bad old apps
;;(set-selection-coding-system 'koi8-r)

;; End of the language environment settings.
;;-----------------------------------------------------------

;;---------------------------------------------------------------
;;Русификация 2 
;;---------------------------------------------------------------
;;Чтобы появилась возможность вводить текст на русском языке, 
;;необходимо добавить туда следующие строки 
;;(переключение на русский язык с помощью сочетания клавиш C-\):
;;(set-language-environment "Cyrillic-KOI8")
;;(set-default-buffer-file-coding-system 'koi8-r)
;;(set-default-file-coding-system 'koi8-r)
;;(set 'default-input-method "cyrillic-jcuken")
;;(put-charset-property 'cyrillic-iso8859-5
;;                      'preferred-coding-system 'koi8-r)
;;---------------------------------------------------------------

;;-----------------------------------------------------------
;;Переключение м/у буферами ibuffer  
;;-----------------------------------------------------------
;;ibuffer
;;Стандартный просмотрщик буферов (C-x, C-b) мне никогда не нравился, даже не знаю почему. 
;;Сегодня подсказали, что с 22 версии в emacs есть альтернатива ? ibuffer. 
;;Гораздо, гораздо приятнее, переназначил кейбинд на него:
;;(global-set-key "\C-x\C-b" 'ibuffer)
;;-----------------------------------------------------------






;;---------------------
;;IDO
;;---------------------
;;(require 'ido)
;;(ido-mode t)
;;---------------------

;;--------------------------------------------------------------
;;Настройка внешнего вида редактора 
;;--------------------------------------------------------------
;;установка размеров экрана
(set-frame-height (selected-frame) 52)
(set-frame-width (selected-frame) 182)

;;установка левого верхнего угла фрейма 
(set-frame-position (selected-frame) 0 0)
;;
;;установка цветов экрана
;;(set-background-color "gray90")
;;(set-foreground-color "black")

;;установка режимов работы курсора
;;(set-cursor-color "green")
;;(setq blink-matching-delay 0.1)
;;(blink-cursor-mode nil);курсор не мигает!
;;
;;--------------------------------------------------------------

;;---------------------------------------------
;;Цветовая схема 
;;---------------------------------------------
;;более темные цвета.
(set-background-color "#333333")
(set-foreground-color "#ffffff")
;;---------------------------------------------

;;-----------------------------------------------------------------------------
;;Сохранение сеанса
;;-----------------------------------------------------------------------------
;; Подключение библиотеки Desktop для сохранения состояния Emacs 
;;от одного сеанса к другому.
(desktop-load-default) 
(desktop-read)
;; Переменная desktop-files-not-to-save говорит, какие файлы исключаются при со-
;;хранении состояния. 
;;Ее значение - это регулярное выражение, совпадающее с именами
;;исключаемых файлов. 
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;;Компиляция 
;;-----------------------------------------------------------------------------
;;команда по умолчанию для M-x compile
;;(setq  compile-command "/home/miha/project_branch/branch_projects_r/snap/build" )
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;;Регистры 
;;-----------------------------------------------------------------------------
;;Если вы часто обращаетесь к определенным именам файлов, вам будет удобно поме-
;;стить эти имена в регистры. Вот код на Лиспе, используемый для записи имени файла в регистр:
;;(set-register ?z '(file . "/home/miha/project_branch/create_tar_arch/111"))
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; Lisp
;;-----------------------------------------------------------------------------
;;(setq inferior-lisp-program "/usr/bin/clisp")
;;(custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;; '(column-number-mode t)
;; '(show-paren-mode t)
;; '(transient-mark-mode t))
;;(custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should conwtain only one such instance.
;;  ;; If there is more than one, they won't work right.
;; )


;;-----------------------------------------------------------------------------
;;Cedet
;;-----------------------------------------------------------------------------

(load-file "~/.emacs.d/cedet-1.1-startup.el")


;; Load CEDET.
;; See cedet/common/cedet.info for configuration details.
;; IMPORTANT: For Emacs >= 23.2, you must place this *before* any
;; CEDET component (including EIEIO) gets activated by another.
;; package (Gnus, auth-source, ...).
;;tmp(load-file "~/.emacs.d/cedet-1.1/common/cedet.el")

;; Enable EDE (Project Management) features
;;tmp(global-ede-mode 1)

;; Enable EDE for a pre-existing C++ project
;; (ede-cpp-root-project "NAME" :file "~/myproject/Makefile")


;; Enabling Semantic (code-parsing, smart completion) features
;; Select one of the following:

;; * This enables the database and idle reparse engines
;;tmp(semantic-load-enable-minimum-features)

;; * This enables some tools useful for coding, such as summary mode,
;;   imenu support, and the semantic navigator
;;tmp(semantic-load-enable-code-helpers)

;; * This enables even more coding tools such as intellisense mode,
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;; (semantic-load-enable-gaudy-code-helpers)

;; * This enables the use of Exuberant ctags if you have it installed.
;;   If you use C++ templates or boost, you should NOT enable it.
;; (semantic-load-enable-all-exuberent-ctags-support)
;;   Or, use one of these two types of support.
;;   Add support for new languages only via ctags.
;; (semantic-load-enable-primary-exuberent-ctags-support)
;;   Add support for using ctags as a backup parser.
;; (semantic-load-enable-secondary-exuberent-ctags-support)

;; Enable SRecode (Template management) minor-mode.
;;tmp(global-srecode-minor-mode 1)


;;(load-file "~/.emacs.d/cedet-1.1/common/cedet.el")
;;(global-ede-mode 1)                      ; Enable the Project management system
;;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
;;(global-srecode-minor-mode 1)            ; Enable template insertion menu




;;(global-ede-mode 1)
;;(load-file "/home/miha/.emacs.d/rc-cedet2.el")
;;(load-file "~/emacs/cedet/common/cedet.el")
;;(global-ede-mode t)
;;(semantic-load-enable-excessive-code-helpers)
;;(require 'semantic-ia)

;;(require 'semantic-gcc)
;;(semantic-add-system-include "~/dvl/prj" 'c++-mode)

;;(setq-mode-local c-mode semanticdb-find-default-throttle
;;                               '(project unloaded system recursive))

;;(defun my-semantic-hook ()
;;  (imenu-add-to-menubar "TAGS"))
;;(add-hook 'semantic-init-hooks 'my-semantic-hook)


;;-----------------------------------------------------------------------------
;; ECB
;;-----------------------------------------------------------------------------
;;(add-to-list 'load-path "~/.emacs.d/ecb-2.40/") 
;;*(require 'ecb)
;;*(global-set-key (kbd "\e\el") 'ecb-toggle-ecb-windows)
;;*(global-set-key (kbd "C-x C-a") 'ecb-activate)
;;*(global-set-key (kbd "C-x C-q") 'ecb-deactivate)
;;*(global-set-key "\M-m" 'ecb-goto-window-methods)
;;*;Перезагрузка окна методов после каждого сохранения
;;*(setq imenu-auto-rescan 1)
;;*;Длинные строки всегда разбивать при отображении
;;*(setq truncate-lines nil)
;;*(setq truncate-partial-width-windows nil)

;;*(custom-set-variables
;;*  ;; custom-set-variables was added by Custom.
;;*  ;; If you edit it by hand, you could mess it up, so be careful.
;;*; Your init file should contain only one such instance.
;;*  ;; If there is more than one, they won't work right.
;;* '(ecb-compile-window-height 10)
;;* '(ecb-compile-window-width (quote edit-window))
;;* '(ecb-options-version "2.32")
;;* '(ecb-prescan-directories-for-emptyness nil)
;;* '(ecb-tip-of-the-day nil))

;;*(custom-set-faces
;;*  ;; custom-set-faces was added by Custom.
;;*  ;; If you edit it by hand, you could mess it up, so be careful.
;;*  ;; Your init file should contain only one such instance.
;;*  ;; If there is more than one, they won't work right.
;;* )



;; Load ECB
;;*(add-to-list 'load-path "~/.emacs.d/ecb")
(require 'ecb-autoloads)
(global-set-key (kbd "C-x p") 'ecb-activate)
(global-set-key (kbd "C-x j") 'ecb-deactivate)
(global-set-key (kbd "C-x ,") 'ecb-toggle-ecb-windows)
(global-set-key (kbd "\e\eg") 'goto-line)
(global-set-key [?\M-g] 'goto-line)
(define-key global-map (kbd "C-<tab>") 'workspace-controller)
(setq ecb-tip-of-the-day nil)
(setq ecb-prescan-directories-for-emptyness nil)


;;---------------------------------------------------------------------------------------------
;; ПОИСК ПАРНОЙ СКОБКИ %
;;---------------------------------------------------------------------------------------------

(defun my-match-paren (arg)
  (interactive "p")
  (cond ((looking-at "\\s\(")
  (forward-list 1) (backward-char 1))
  ((looking-at "\\s\)")
  (forward-char 1) (backward-list 1))
  (t (self-insert-command (or arg1)))))

(global-set-key (kbd "A-%") 'my-match-paren)


;;---------------------------------------------------------------------------------------------
;; ОТКРЫВАЕМ ПРОЕКТ ВЫЗОВОМ ФУНКЦИИ 
;;---------------------------------------------------------------------------------------------
;;Заготовка окон для проекта
(defun my-make-three-windows2 () 
  "Make three windows"
  (interactive)
  (split-window-vertically) 
  (other-window 1) 
  (eshell) 
  (rename-buffer "shell-first") 
  (other-window 1) 
  (put 'upcase-region 'disabled nil)
  )

(defun my-make-three-windows3 () 
  "Make three windows"
  (interactive)
  (split-window-vertically) 
  (split-window-horizontally)
  (other-window 1) 
  (other-window 1) 
  (eshell) 
  (rename-buffer "shell-first") 
  (other-window 1) 
  (put 'upcase-region 'disabled nil)
  )



;;Открываем проект communch-2
(defun my-open-communch-2 () 
  "Open project communch-2"
  (interactive)
  (my-make-three-windows2)
  (find-file "~/project_branch/communch-2/")
  (other-window 1) 
  (other-window 1) 
  )
;;Открываем проект communch
(defun my-open-communch () 
  "Open project communch2"
  (interactive)
  (my-make-three-windows2)
  (find-file "~/project_branch/communch/")
  (other-window 1) 
  (other-window 1) 
  )
;;---------------------------------------------------------------------------------------------

;;---------------------------------------------------------------------------------------------
;;ПЕРЕМЕЩЕНИЕ МЕЖДУ ОКНАМИ
;;---------------------------------------------------------------------------------------------
;;Перемещение по окнам при помощи клавиш  <S-up>, <S-down>, <S-left>, <S-right>
(windmove-default-keybindings)
(load-file "/home/miha/.emacs.d/window-number.el")
(require 'window-number)
(window-number-mode)
(window-number-meta-mode)
;;---------------------------------------------------------------------------------------------


;;---------------------------------------------------------------------------------------------
;;УПРАВЛЯЕМ РАЗМЕРОМ ОКНА
;;---------------------------------------------------------------------------------------------
;;изменять размеры окна, по умолчанию, можно мышкой, для этого нужно убирать руку от клавиатуры. 
;;а это удобно? я тоже так думаю. добавлем следущее в .emacs.
;;как видно из keymap' ом, 'ctrl + alt + \arrow keys\' резайзит окна. 
(load-file "/home/miha/.emacs.d/resize-window.el")
(require 'resize-window)

(global-set-key [C-M-left] 'win-resize-enlarge-vert)
(global-set-key [C-M-left] 'win-resize-minimize-horiz)
(global-set-key [C-M-up] 'win-resize-enlarge-vert)
(global-set-key [C-M-up] 'win-resize-enlarge-horiz)
(global-set-key [C-M-down] 'win-resize-mi2nimize-vert)
(global-set-key [C-M-down] 'win-resize-minimize-horiz)
(global-set-key [C-M-right] 'win-resize-minimize-vert)
(global-set-key [C-M-right] 'win-resize-enlarge-horiz)
;;END (УПРАВЛЯЕМ РАЗМЕРОМ ОКНА)
;;---------------------------------------------------------------------------------------------


;;---------------
;;Включаем SVN
;;---------------
;;(require 'psvn)
;;--------------


;;---------------
;;Включаем tramp
;;---------------
(require 'tramp)
(setq tramp-default-method "scp")
;;--------------





;;----------------
;;Резервные копии
;;----------------
;;По умолчанию при сохранении файла в emacs создаётся резервная копия в том же       
;;каталоге с добавленной к имени тильдой. Многие борются с этой проблемой путём      
;;полного отключения резервных копий. Но ведь в какой-то момено они могут оказаться  
;;думающий о вечном        полезны. Если вам не нравится, что резервные копии расползаются по всему дереву    
;;каталогов (и при этом вы не хотите отключать их совсем), предлагаю решение:                                                                                        
(when (not (file-directory-p "~/.backup"))                                         
  (make-directory "~/.backup"))                                                    
(if (file-directory-p "~/.backup")                                                 
    (setq backup-directory-alist '(("." . "~/.backup"))))                          
;;Теперь все резервные копии будут сохраняться в каталоге ~/.backup, независимо от   
;;типа файлов.                                                                       
                                                                                                            




;;(setq w3m-icon-directory "/usr/share/emacs/22.3/etc/images/w3m/")
(setq w3m-use-cookies t)
(setq w3m-keep-arrived-urls 0)
(setq w3m-show-graphic-icons-in-mode-line t)
(setq w3m-show-graphic-icons-in-header-line t)
(setq w3m-use-toolbar t)
(autoload 'w3m "w3m" "Interface for w3m on Emacs." t)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
(autoload 'w3m-find-file "w3m" "Find a local file using emacs-w3m." t)
(autoload 'w3m-search "w3m-search" "Search words using emacs-w3m." t)
(autoload 'w3m-weather "w3m-weather" "Display a weather report." t)
(autoload 'w3m-antenna "w3m-antenna" "Report changes of web sites." t)
(autoload 'w3m-namazu "w3m-namazu" "Search files with Namazu." t)






;;автоопределение кодировки файлов
(defun enca-detect-coding (arg)
  (if (not (and (eq (car arg) 'insert-file-contents) (nth 1 arg)))
      'undecided
    (let* (
	  (target (nth 1 arg))
          (enca-buffer (generate-new-buffer " *enca*"))
          (charset nil)
          (run-enca (if (atom target)
                        (lambda ()
                          (call-process "enca" target enca-buffer nil "-m"))
                      (lambda ()
                         (with-current-buffer (cdr target)
                          (let ((coding-system-for-write 'no-conversion)
                                (size (min 20480 (- (point-max)
                                                    (point-min)))))
                            (call-process-region
                             (point-min) (+ (point-min) size)
                             "enca" nil enca-buffer nil "-m")))))))
      (unwind-protect
	  (if (file-exists-p target)
            (when (= 0 (funcall run-enca))
              (with-current-buffer enca-buffer
                (goto-char 1)
                (downcase-region 1 (point-max))
                (skip-chars-forward "\t\n\f\r ")
                (delete-region 1 (point))
                (when (looking-at "\\(ibm\\)[0-9]")
                  (replace-match "cp" t t nil 1))
                (skip-chars-forward "^\t\n\f\r ")
                (setq charset (intern-soft (buffer-substring 1 (point))))))
          (kill-buffer enca-buffer)))
      (or (and (not (memq charset '(nil unknown us-ascii)))
               (coding-system-p charset)
               charset)
          'undecided))))

(modify-coding-system-alist 'file "" 'enca-detect-coding)

(modify-coding-system-alist 'file "\\.h\\'"   'koi8-r)
(modify-coding-system-alist 'file "\\.cxx\\'"   'koi8-r)


;; Установки автоопределения кодировок. Первой будет определяться utf-8-unix
;;(prefer-coding-system 'utf-8-unix)
;;(prefer-coding-system 'koi8-r-unix)
;;(prefer-coding-system 'windows-1251-dos)

(put 'narrow-to-region 'disabled nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40")
 '(global-semantic-tag-folding-mode t nil (semantic-util-modes))
 '(semantic-idle-scheduler-idle-time 3)
 '(semantic-self-insert-show-completion-function (lambda nil (semantic-ia-complete-symbol-menu (point)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
